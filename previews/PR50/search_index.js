var documenterSearchIndex = {"docs":
[{"location":"about/#About","page":"About","title":"About","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This page contains some general information about this project and recommendations about contributing.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Pages = [\"about.md\"]","category":"page"},{"location":"about/#Contributing","page":"About","title":"Contributing","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"If you like this package, consider contributing!","category":"page"},{"location":"about/","page":"About","title":"About","text":"Creating an issue in the MathematicalPredicates GitHub issue tracker to report a bug, open a discussion about existing functionality, or suggest new functionality is appreciated.","category":"page"},{"location":"about/","page":"About","title":"About","text":"If you have written code and would like it to be peer reviewed and added to the library, you can fork the repository and send a pull request (see below). Typical contributions include fixing a bug, adding a new feature, or improving the documentation (either in source code or the online manual).","category":"page"},{"location":"about/","page":"About","title":"About","text":"Below we give some general comments about contributing to this package. The JuliaReach development documentation describes coding guidelines; take a look when in doubt about the coding style that is expected for the code that is finally merged into the library.","category":"page"},{"location":"about/#Branches-and-pull-requests-(PR)","page":"About","title":"Branches and pull requests (PR)","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"We use a standard pull request policy: You work in a private branch and eventually add a pull request, which is then reviewed by other programmers and merged into the master branch.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Each pull request should be pushed in a new branch with the name of the author followed by a descriptive name, e.g., mforets/my_feature. If the branch is associated to a previous discussion in an issue, we use the name of the issue for easier lookup, e.g., mforets/7.","category":"page"},{"location":"about/#Unit-testing-and-continuous-integration-(CI)","page":"About","title":"Unit testing and continuous integration (CI)","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This project is synchronized with GitHub Actions such that each PR gets tested before merging (and the build is automatically triggered after each new commit). For the maintainability of this project, it is important to make all unit tests pass.","category":"page"},{"location":"about/","page":"About","title":"About","text":"To run the unit tests locally, you can do:","category":"page"},{"location":"about/","page":"About","title":"About","text":"julia> using Pkg\n\njulia> Pkg.test(\"MathematicalPredicates\")","category":"page"},{"location":"about/","page":"About","title":"About","text":"We also advise adding new unit tests when adding new features to ensure long-term support of your contributions.","category":"page"},{"location":"about/#Contributing-to-the-documentation","page":"About","title":"Contributing to the documentation","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"New functions and types should be documented according to the JuliaReach development documentation.","category":"page"},{"location":"about/","page":"About","title":"About","text":"You can view the source-code documentation from inside the REPL by typing ? followed by the name of the type or function.","category":"page"},{"location":"about/","page":"About","title":"About","text":"julia> ?my_function","category":"page"},{"location":"about/","page":"About","title":"About","text":"The documentation you are currently reading is written in Markdown, and it relies on the package Documenter.jl to produce the final layout. The sources for creating this documentation are found in docs/src. You can easily include the documentation that you wrote for your functions or types there (see the source code or Documenter's guide for examples).","category":"page"},{"location":"about/","page":"About","title":"About","text":"To generate the documentation locally, run make.jl, e.g., by executing the following command in the terminal:","category":"page"},{"location":"about/","page":"About","title":"About","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"about/#Credits","page":"About","title":"Credits","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"Here we list the names of the maintainers of the MathematicalPredicates.jl library, as well as past and present contributors (in alphabetic order).","category":"page"},{"location":"about/#Core-developers","page":"About","title":"Core developers","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"Marcelo Forets\nChristian Schilling","category":"page"},{"location":"lib/predicates/#Predicates","page":"Predicates","title":"Predicates","text":"","category":"section"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"This section describes the predicate types available in this package.","category":"page"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"Pages = [\"predicates.md\"]\nDepth = 3","category":"page"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"CurrentModule = MathematicalPredicates","category":"page"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"Predicate\nevaluate","category":"page"},{"location":"lib/predicates/#MathematicalPredicates.Predicate","page":"Predicates","title":"MathematicalPredicates.Predicate","text":"Predicate{N}\n\nThe abstract supertype of predicates.\n\n\n\n\n\n","category":"type"},{"location":"lib/predicates/#MathematicalPredicates.evaluate","page":"Predicates","title":"MathematicalPredicates.evaluate","text":"evaluate(p::Predicate, args...)\n\nEvaluate a predicate for given arguments.\n\nInput\n\np    – predicate\nargs – argument list\n\nOutput\n\nA Bool corresponding to the evaluation of p(args).\n\nNotes\n\nWe offer p(args) as a short-hand version of evaluate(p, args).\n\n\n\n\n\n","category":"function"},{"location":"lib/predicates/#Atom","page":"Predicates","title":"Atom","text":"","category":"section"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"Atom","category":"page"},{"location":"lib/predicates/#MathematicalPredicates.Atom","page":"Predicates","title":"MathematicalPredicates.Atom","text":"Atom{N, T} <: Predicate{N}\n\nAn atomic predicate of arity N.\n\nFields\n\np – Julia predicate\n\n\n\n\n\n","category":"type"},{"location":"lib/predicates/#Negation","page":"Predicates","title":"Negation","text":"","category":"section"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"Negation","category":"page"},{"location":"lib/predicates/#MathematicalPredicates.Negation","page":"Predicates","title":"MathematicalPredicates.Negation","text":"Negation{N, T<:Predicate{N}} <: Predicate{N}\n\nA negation of a predicate of arity N.\n\nFields\n\np – predicate\n\n\n\n\n\n","category":"type"},{"location":"lib/predicates/#Conjunction","page":"Predicates","title":"Conjunction","text":"","category":"section"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"Conjunction","category":"page"},{"location":"lib/predicates/#MathematicalPredicates.Conjunction","page":"Predicates","title":"MathematicalPredicates.Conjunction","text":"Conjunction{N, VT<:AbstractVector{<:Tuple{<:Predicate, <:AbstractVector{Int}}}} <: Predicate{N}\n\nA conjunction of predicates of arity N.\n\nFields\n\nconjuncts – vector of conjuncts\n\n\n\n\n\n","category":"type"},{"location":"lib/predicates/#Disjunction","page":"Predicates","title":"Disjunction","text":"","category":"section"},{"location":"lib/predicates/","page":"Predicates","title":"Predicates","text":"Disjunction","category":"page"},{"location":"lib/predicates/#MathematicalPredicates.Disjunction","page":"Predicates","title":"MathematicalPredicates.Disjunction","text":"Disjunction{N, VT<:AbstractVector{<:Tuple{<:Predicate, <:AbstractVector{Int}}}} <: Predicate{N}\n\nA disjunction of predicates of arity N.\n\nFields\n\ndisjuncts – vector of disjuncts\n\n\n\n\n\n","category":"type"},{"location":"lib/LazySets/#LazySets-integration","page":"LazySets integration","title":"LazySets integration","text":"","category":"section"},{"location":"lib/LazySets/","page":"LazySets integration","title":"LazySets integration","text":"This section describes the functionality in combination with LazySets.","category":"page"},{"location":"lib/LazySets/","page":"LazySets integration","title":"LazySets integration","text":"Pages = [\"LazySets.md\"]\nDepth = 3","category":"page"},{"location":"lib/LazySets/","page":"LazySets integration","title":"LazySets integration","text":"CurrentModule = MathematicalPredicates","category":"page"},{"location":"lib/LazySets/","page":"LazySets integration","title":"LazySets integration","text":"SetAtom","category":"page"},{"location":"lib/LazySets/#MathematicalPredicates.SetAtom","page":"LazySets integration","title":"MathematicalPredicates.SetAtom","text":"SetAtom{S<:LazySet, T} <: Predicate{Val{1}}\n\nA unary atomic predicate defined with respect to a set.\n\nFields\n\nX – set\nf – function that takes the set X as first argument\n\n\n\n\n\n","category":"type"},{"location":"#MathematicalPredicates.jl","page":"Home","title":"MathematicalPredicates.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MathematicalPredicates is a Julia package for defining mathematical predicates.","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"lib/predicates.md\",\n    \"lib/LazySets.md\",\n]\nDepth = 2","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ReachabilityAnalysis.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"uses this package to represent safety properties.","category":"page"},{"location":"","page":"Home","title":"Home","text":"FirstOrderLogic.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"processes formulas in first-order logic.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GeometricalPredicates.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"provides geometrical predicates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExactPredicates.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"provides geometrical predicates.","category":"page"}]
}
